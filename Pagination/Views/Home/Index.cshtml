@model DemoTable

@{
    ViewData["Title"] = "Index";
}

<h2>Index</h2>

<div>
    Find by name: <input type="text" id="searchName" />
    <button id="btnSearch" class="btn btn-primary" >Search</button>
</div>

<table class="table">
    <thead>
        <tr>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Id)
            </th>
            <th scope="col">
                @Html.DisplayNameFor(model => model.Name)
            </th>
        </tr>
    </thead>
    
    <tbody id="tableBody">
        @*<tr>
            <th scope="row">Id</th>
            <td>Name</td>
        </tr>*@
    </tbody>
</table>

<nav aria-label="Page navigation example">
    <ul id="paginationLink" class="pagination justify-content-center user-select-none">
        @*<li id="previousBtn" class="page-item disabled">
            <a class="page-link" href="#">Previous</a>
        </li>

        <li class="page-item @(i == 1 ? "active" : "")">
            <a class="page-link page-index" href="#">@i</a>
        </li>

        <li id="nextBtn" class="page-item">
            <a class="page-link" href="#">Next</a>
        </li>*@
    </ul>
</nav>

@section Scripts {
    <script type="text/javascript">
        $(document).ready(() => {

            // GLOBAL VARIABLE ================================================================================
            let GLOBAL_SEARCH_NAME;
            let GLOBAL_SORT_ORDER;

            // to prevent xss attack ==========================================================================
            let text = (str) => {
                return $('<div>',{text:str}).text();
            };

            // to re-render the pagination link  ==============================================================
            let renderPaginationLink = (pageIndex, totalCount) => {

                // refresh the dom -------------------------------------------------------------------
                let paginationLink = $('#paginationLink');
                paginationLink.html('');

                // append previousBtn, and look is it disable or not ---------------------------------
                let previousDisabled = (pageIndex <= 1) ? 'disabled' : '';
                paginationLink.append(`
                    <li id="previousBtn" class="page-item ${previousDisabled}">
                        <a class="page-link" href="#">Previous</a>
                    </li>
                `);

                // previous previous button event listener -------------------------------------------
                $('#previousBtn').click(e => {
                    // if pageIndex is lower than 1, do nothing
                    // else minus pageIndex by 1
                    if (pageIndex <= 1) return;
                    pageIndex -= 1;

                    // ajax request for table change
                    ajaxRequest(pageIndex, GLOBAL_SEARCH_NAME);
                });

                // preparing variable ----------------------------------------------------------------
                let middlePoint = 3;
                let startingInt = 1;

                // if PageIndex is larger than middlePoint
                if (pageIndex > middlePoint)
                {
                    // then add the starting int by substracting from pageIndex
                    startingInt += pageIndex - middlePoint;

                    // if it was last two index, minus startingInt with 2 or 1.
                    if (pageIndex * 5 >= totalCount)
                    {
                        startingInt -= 2;
                    }
                    else if (pageIndex * 5 >= totalCount - 5)
                    {
                        startingInt -= 1;
                    }
                }

                // loop and append the page-index ----------------------------------------------------
                for (let i = startingInt; i < startingInt + 5; i++ ) {
                    // if total pageIndex is larger than totalCount
                    // break the loop
                    if ((i - 1) * 5 >= totalCount) break;

                    let active = (pageIndex == i) ? 'active' : '';

                    paginationLink.append(`
                        <li class="page-item ${active}">
                            <a class="page-link page-index" href="#">${i}</a>
                        </li>
                    `);
                }

                // page index click event listener ---------------------------------------------------
                $('.page-index').click(e => {
                    // get the index they need to go (have to convert to number)
                    let index = $(e.currentTarget).text();
                    index = parseInt(index);

                    // ajax request for table change
                    ajaxRequest(index, GLOBAL_SEARCH_NAME);
                });

                // append nextBtn, and look is it disable or not -------------------------------------
                let nextDisabled = (pageIndex >= (totalCount / 5)) ? 'disabled' : '';
                paginationLink.append(`
                    <li id="nextBtn" class="page-item ${nextDisabled}">
                        <a class="page-link" href="#">Next</a>
                    </li>
                `);

                // next button click event listener --------------------------------------------------
                $('#nextBtn').click(e => {
                    // if pageIndex is larger than totalCount pageIndex, do nothing
                    // else add pageIndex by 1
                    if (pageIndex >= (totalCount / 5)) return;
                    pageIndex += 1;

                    // ajax request for table change
                    ajaxRequest(pageIndex, GLOBAL_SEARCH_NAME);
                });
            };

            // to re-render the table body ==============================================================
            let renderTableBody = (table) => {
                let tableBody = $('#tableBody');
                tableBody.html('');

                for (let data of table) {
                    tableBody.append(`
                        <tr>
                            <th scope="row">${data.id}</th>
                            <td>${data.name}</td>
                        </tr>
                    `);
                }
            };

            // for ajax request =========================================================================
            let ajaxRequest = (pageIndex, searchName) => {
                $.ajax({  
                    type: "POST",  
                    url: '@Url.Action("Index")',  
                    data: {
                        sortOrder: '',
                        searchName: searchName,
                        pageIndex: pageIndex,
                    },
                    //dataType: "json",  
                    //contentType: "application/json; charset=utf-8",  
                    success: (data) => {  
                        console.log('success', data, data.demoTable);
                        renderTableBody(data.demoTable);
                        renderPaginationLink(data.pageIndex, data.totalCount);
                    },  
                    error: () => {  
                        alert("Error display data, Please refresh the page.");  
                    }  
                });
            };

            // IMPLEMENTATION ---------------------------------------------------------------------
            ajaxRequest(1);

            $('#btnSearch').click(e => {
                // get the search value and assign to global
                let searchName = $('#searchName').val();
                GLOBAL_SEARCH_NAME = searchName;

                // then call to ajax
                ajaxRequest(1, searchName);
            });
        });
    </script>
}